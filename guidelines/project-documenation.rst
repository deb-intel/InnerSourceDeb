.. _filename:

Project Documentation
#####################

Project documentation in software engineering is the umbrella term that encompasses written
documents and other materials that cover usage guidelines, software design, API reference,
development process, etc.

Project documentation is critical for InnerSource as it enables a self-service process for new
contributors and consumers. They can find the answers to the most common questions on their own.
Without good project documentation, maintainers become a bottleneck in bringing new contributors
and consumers up to speed, and it becomes hard to scale development and get full advantage of
the InnerSource practices.

There are different types of project documentation. One classification suggests two major 
categories - **product documentation** and **process documentation**. **Process documentation**
includes coding guidelines, documentation on bug tracking process, continuous
integration, quality assurance, other engineering practices, etc.

**Product documentation** can be further split into **user documentation** and **system
documentation**. **User documentation** includes public API reference, user guides, administrator
guides, release notes, etc.

**System documentation** covers software architecture, design principles, code organization,
requirements, test plans, internal API reference, etc.


Prerequisites
*************

There are no prerequisites to start project documentation. The best practice is to seed the
project documentation with a README file as soon as the source code repository is created and
then evolve the documentation as the software product and processes mature.


Process
*******

Documentation should be treated as code:

* Have internal policies or rules to be followed

* Be placed under source control

* Have clear ownership responsible for maintaining the docs

* Undergo reviews for changes (and change with the code it documents)

* Have issues tracked, as bugs are tracked in code

* Be periodically evaluated (tested, in some respect)

* If possible, be measured for aspects such as accuracy, freshness, etc. (tools have still not caught up here)


BKMs
****

* README and CONTRIBUTING files in the root of a source code repository should be the entry for
  project documentation. This ensures documentation discoverability and enables a self-service
  model for potential contributors and consumers.

* Manage project documentation in GitHub (not a Wiki). It provides familiar tools to manage documentation
  as code - versioning, pull requests, reviews, issues, CI/CD, etc.

* Consider filing Requests for Comments (RFC) documents whenever you need to make a design
  decision or choose between multiple options. When managed as code, RFC documents will be a
  good place to collaborate via pull requests, comments, etc. Additionally, the history of those
  discussions will be kept in GitHub for future reference.


Tier Definitions
****************

Innersource Readiness assesses exposed interface documentation separately from the rest of the
project documentation, since documentation coverage for such things as API reference can be
easily measured and tracked.

Exposed Interface Documentation
===============================

.. _tier_exposed_interface_docs_start:

* **Tier 5**: Automated check verifies exposed interface coverage.

* **Tier 4**: At least 50% applicable exposed interface coverage (ex: Public API for Binary Reuse,
  Public + Internal API for Source Reuse & Contribution).

  Autogenerated exposed interface documentation. Interfaces only, not comments on usage. E.g.
  using Javadoc, Doxygen, Swagger, or similar API documentation system.
  
* **Tier 3**:	At least 60% applicable public interface coverage.
  
* **Tier 2**:	At least 75% applicable exposed interface coverage.

* **Tier 1**:	100% applicable exposed interface coverage.

  Exposed interface documentation with examples of usage and explanation.
  
.. _tier_exposed_interface_docs_end:

Internal Project Documentation
===============================

.. _tier_internal_project_docs_start:

* **Tier 5**: No documentation.

* **Tier 4**: Quickstart and tutorials for key features / use cases.
  
* **Tier 3**:	Searchable and viewable by all blue badge employees.
  
* **Tier 2**:	Able to track documentation changes with Git version control.

* **Tier 1**:	Extensive tutorials requiring little to no setup.
  Internal documentation release aligns with SW Release
  
.. _tier_internal_project_docs_end:
