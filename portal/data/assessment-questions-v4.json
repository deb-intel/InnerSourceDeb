[
  {
    "title": "Architecture",
    "dtoKey": "architecture",
    "domain": "repoProject",
    "intent": "More modular the design, the easier it is to contribute (find the part you need to change), the easier to reuse the portion you need. Easier to test, easier for CI, etc.",
    "category": "Architecture",
    "importance": 2,
    "options": [
      {
        "title": "Monolithic architecture and design",
        "description": "Shows no modularity."
      },
      {
        "title": "Semi-monolithic architecture and design",
        "description": "Shows progress toward modularity where several modules may be interdependent."
      },
      {
        "title": "Modular and interdependent architecture",
        "description": "Shows full modularity with clear high-level definition and responsibility of subsystems for all modules. All modules are externally usable without hidden APIs. "
      },
      {
        "title": "Modular and several independent modules",
        "description": "Shows progress toward loosely coupled architecture."
      },
      {
        "title": "Modular and mostly independent modules",
        "description": "Shows loosely coupled components with clear responsibilities and APIs."
      }
    ],
    "tierMapping": [5, 4, 3, 2, 1],
    "maturityMapping": [-1, 0, 2, 2, 4]
  },
  {
    "title": "Binary Distribution Via Package Manager",
    "dtoKey": "binaryDistributionViaPackageManager",
    "domain": "project",
    "intent": "Ease of consumption, risk mitigation, reproducibility",
    "category": "Distribution",
    "importance": 2,
    "options": [
      {
        "title": "N/A",
        "description": ""
      },
      {
        "title": "Not distributed via a package manager",
        "description": "Requires manual downloading of a binary from an FTP server. Has clear installation instructions."
      },
      {
        "title": "Distributed via a package manager",
        "description": "Distributed via package a manager. Installation is not tested using a system account prior to distribution."
      },
      {
        "title": "Distributed and installation tested",
        "description": "Distributed via a package manager. Installation is tested using a system account prior to distribution."
      },
      {
        "title": "Distributed, schedued installation-tested, and health-check tool",
        "description": "Distributed via a package manager. Installation is tested using a system account on defined schedule. Has an installation health check tool that is used to test installation using a system account."
      },
      {
        "title": "Distributed, schedued installation-tested, health-check tool, pre and post deployment tests",
        "description": "Distributed via package manager. Installation is tested using a system account on defined schedule. Has an installation health check tool that is used to test installation using a system account. Installation is tested after deployment of a binary."
      }
    ],
    "tierMapping": [-1, 5, 4, 3, 2, 1],
    "maturityMapping": [-1, 1, 1, 2, 4, 4]
  },
  {
    "title": "Branding And Naming",
    "dtoKey": "brandingAndNaming",
    "domain": "project",
    "intent": "Reuse team needs approved and documented TM&B name or generic name for the project.",
    "category": "Deployment",
    "importance": 2,
    "options": [
      {
        "title": "Trademark & Branding (TM&B) approved product name if applicable",
        "description": "Document Trademark & Branding (TM&B) approved product name in project details in the InnerSource portal."
      },
      {
        "title": "Trademark & Branding (TM&B) name not applicable",
        "description": "Document N/A product name if you don't need it in project details in the InnerSource portal."
      },
      {
        "title": "Use descriptive name when TM&B is not applicable",
        "description": "https://probable-fiesta-6f2be87d.pages.github.io/guidelines/tm_and_b.html"
      }
    ],
    "tierMapping": [5, 5, 3],
    "maturityMapping": [1, 1, 2]
  },
  {
    "title": "Build Environment And Documentation",
    "dtoKey": "buildEnvironmentAndDocumentation",
    "domain": "project",
    "intent": "Reuse or contribution teams need to be able to easily build the code they are working on in their env.",
    "category": "DX",
    "importance": 3,
    "options": [
      {
        "title": "Build instructions are not documented or only partially documented.",
        "description": "Non-portable. May be developed for single platform."
      },
      {
        "title": "Documented build instructions that are not automated.",
        "description": "Comprehensive step-by-step build instructions including links for any pre-requisites, containers / VMs, AGS permissions, or other requirements"
      },
      {
        "title": "One command to set up a project and build a deployable artifact.",
        "description": "The command needs to build, install project dependencies, and use standard dependency management solution associated with respective language: JavaScript & package.json, Python & requirements.txt, Go & Go modules, etc. Example: Contributor clones a repo, executed one command to install everything needed to work with the project, and executes one command to build deployable artifact."
      },
      {
        "title": "Fully automated build scripts able to be used locally or by Continuous Integration (CI).",
        "description": "Fully automated build with documentation to replicate it"
      },
      {
        "title": "Cross-platform command that combines automated build scripts",
        "description": "One command to build a deployable deliverable on any supported machine (ie. docker compose, helm, etc.) using mainstream build utilities (cmake, automake, etc.). Developer set up for build environment is fully documented and build scripts are clear."
      }
    ],
    "tierMapping": [5, 4, 3, 2, 1],
    "maturityMapping": [-1, 2, 2, 4, 4]
  },
  {
    "title": "Code Base Naming",
    "dtoKey": "codeBaseNaming",
    "domain": "repo",
    "intent": "1Source migration into approved namespace needed for reuse and contribution to start occurring",
    "category": "Source Governance",
    "importance": 4,
    "options": [
      {
        "title": "Arbitrary Source Control Management (SCM).",
        "description": "Project not yet migrated to 1Source Source Control Management (SCM)."
      },
      {
        "title": "Migration to 1Source in progress or doesn't meet 1Source guidelines.",
        "description": "Self defined and maintained code base naming convention"
      },
      {
        "title": "GitHub project, repository names, and location meet 1Source guidelines.",
        "description": "GitHub repos are managed via 1Source inventory. https://github.com/intel-innersource/inventory/blob/master/README.md and https://github.com/intel-innersource/inventory#governance."
      },
    ],
    "tierMapping": [5, 4, 3],
    "maturityMapping": [-1, 0, 1]
  },
  {
    "title": "Compliance For Contribution",
    "dtoKey": "complianceForContribution",
    "domain": "repo",
    "intent": "Compliannt to corporate guidelines and is approriate for reuse.",
    "category": "Governance",
    "importance": 4,
    "options": [
      {
        "title": "No corporate compliance enforcement",
        "description": ""
      },
      {
        "title": "Periodical manual review of new code for corporate compliance",
        "description": ""
      },
      {
        "title": "Review of new code for corporate compliance upon release",
        "description": "Developer code review for well-written code.  Internal products should meet AppSec requirements.  External should meet SDL and SWLC requirements."
      },
      {
        "title": "Some applicable automated checks are integrated into pull-request (PR) validation pipeline.",
        "description": ""
      },
      {
        "title": "All applicable automated checks are integrated into pull-request (PR) validation pipeline.",
        "description": "Examples: SDL (klockwork, snyk), SWLC (protex and IPLDT), etc."
      }
    ],
    "tierMapping": [5, 4, 3, 2, 1],
    "maturityMapping": [-1, 0, 1, 2, 4]
  },
  {
    "title": "Contribution Guidelines",
    "dtoKey": "contributionGuidelines",
    "domain": "repoProject",
    "intent": "Critical for contribution teams to understand documented contribution guidelines",
    "category": "DX",
    "importance": 2,
    "options": [
      {
        "title": "No contribution guidelines documented.",
        "description": ""
      },
      {
        "title": "Partially documnented internal contribution guidelines.",
        "description": "Examples include Enterprise wiki, readme, sharepoint, teams, etc."
      },
      {
        "title": "CONTRIBUTING file/link at root of GitHub repo and follows guidelines.",
        "description": "File clearly outlines Licensing requirements, Code Style, CI/test requirements, Contribution Workflow, etc.  Example: https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file"
      },
      {
        "title": "Some applicable pre-commit or pre-merge checks for contributions.",
        "description": "Automated checks for SOME BUT NOT ALL contribution guidelines upon pull request."
      },
      {
        "title": "All applicable pre-commit or pre-merge checks for contributions.",
        "description": "Automated checks for each contribution guideline (ex: scanning for code style)."
      }
    ],
    "tierMapping": [5, 4, 3, 2, 1],
    "maturityMapping": [-1, 1, 2, 2, 2]
  },
  {
    "title": "Support Contributing Users",
    "dtoKey": "supportContributingUsers",
    "domain": "repoProject",
    "intent": "Support system for contributors. Communicate with originating team.",
    "category": "Support",
    "importance": 4,
    "options": [
      {
        "title": "Informal communication.",
        "description": ""
      },
      {
        "title": "Communication with documented defined support team.",
        "description": "Example: Public Distribution List (PDL), Yammer, etc."
      },
      {
        "title": "SUPPORT file/link at root of GitHub repo which documents preferred communication channel that meets guidelines.",
        "description": "Defined place to log issues/questions that has access granted to all employees that have completed 1Source onboarding. Internal contributors able to log issues/questions to defined place. Dedicated support team and floating response time. Example: https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file"
      },
      {
        "title": "Dedicated support team with committed response time.",
        "description": "Response time defined and adhered to for responding to opens."
      },
      {
        "title": "Real-time discussion for Q&A.",
        "description": "Examples: Teams, Slack, GitHub Discussions, etc."
      }
    ],
    "tierMapping": [5, 4, 3, 2, 1],
    "maturityMapping": [-1, 2, 2, 2, 4]
  },
  {
    "title": "Deployment Infrastructure",
    "dtoKey": "deploymentInfrastructure",
    "domain": "project",
    "intent": "Reuse or contribution teams need to be able to easily deploy the code in the documented preferred deployment manner.",
    "category": "Deployment",
    "importance": 1,
    "options": [
      {
        "title": "Requires specific hardware without emulation / simulation support.",
        "description": "Contributor has direct access to the hardware locally."
      },
      {
        "title": "Requires specific hardware but supports emulation / simulation.",
        "description": "Contributor has virtual access to the hardware.  Example: Using Android Studio or xCode (iOS)."
      },
      {
        "title": "Easily deployed to varying environments as a whole only.",
        "description": "Continuous deployment. Example: Cloud device farms where you can test how your application works on various hardware (emulated or real)."
      },
      {
        "title": "Easily deployed to varying environments as a whole, but requires significant effort to deploy piecemeal.",
        "description": "Component based builds are easily integrated for deployment. Example: Contribute a change to single oneAPI sub-component and determine ease of deployment."
      },
      {
        "title": "Can be easily deployed to varying environments as a whole or piecemeal.",
        "description": "All components are easily integrated for deployment."
      }
    ],
    "tierMapping": [5, 4, 3, 2, 1],
    "maturityMapping": [-1, 2, 2, 2, 2]
  },
  {
    "title": "Development Setup",
    "dtoKey": "developmentSetup",
    "domain": "repo",
    "intent": "Contribution teams (new devlopers) need to be able to easily setup their dev env in order to make code changes for contributions",
    "category": "DX",
    "importance": 3,
    "options": [
      {
        "title": "Undocumented or lacks clear development setup",
        "description": "Example: New developer has to compile a tool to be able to use it."
      },
      {
        "title": "Custom or possibly outdated build utilities and/or testing frameworks.",
        "description": "Example: Karma test-runner, Python 2, Selenium E2E testing, etc."
      },
      {
        "title": "README file/link at root of GitHub repo contains documented comprehensive set-up.",
        "description": "README may contain all set-up instructions or references to location(s) of set-up instructions."
      },
      {
        "title": "Easy and flexible development set-up.",
        "description": "Example: get all dependencies setup in couple commands like docker container. Project specifies list of constraints (example: which compilers are supported)"
      },
      {
        "title": "One-Click development set-up.",
        "description": "Example: GitHub workspace"
      }
    ],
    "tierMapping": [5, 4, 3, 2, 1],
    "maturityMapping": [-1, 0, 2, 4, 4]
  },
  {
    "title": "Distribution And Packaging",
    "dtoKey": "distributionAndPackaging",
    "domain": "project",
    "intent": "Improving ease of consumption of the components using the package in a particular manner",
    "category": "Distribution",
    "importance": 2,
    "options": [
      {
        "title": "Deliver an unpackaged collection of artifacts.",
        "description": "Example: zip file with arbitrary names."
      },
      {
        "title": "Versioned package that is not self-sufficient.",
        "description": "Not all dependencies are included in the package, but versioning is in place."
      },
      {
        "title": "Self-sufficient package that is easily installable and accessible.",
        "description": "Package accessible from shared InnerSource location (access granted to all employees who have completed 1Source onboarding) - not applicable to open source.  Self-sufficient package has dependencies included or contains dependency meta-data for a package manager. Example: Can the package be installed without any pre-work by relying only on standard system libraries, component repositories, or otherwise include all required dependencies?"
      },
      {
        "title": "Mainstream web or package server including latest release only.",
        "description": ""
      },
      {
        "title": "Mainstream web or package server including latest release older versions with documentation. Checksums in place if applicable.",
        "description": "Documentation on how it was configured and built.  Example: Is the documentation sufficient that a new developer could configure and build the exact same package.  Is there a way to confirm the integrity of the package once downloaded? Industry standard package methods."
      }
    ],
    "tierMapping": [5, 4, 3, 2, 1],
    "maturityMapping": [-1, 1, 2, 2, 4]
  },
  {
    "title": "Project Internal Documentation",
    "dtoKey": "projectInternalDocumentation",
    "domain": "repoProject",
    "intent": "Reuse and contribution teams need internal documentation for the project.",
    "category": "Documentation",
    "importance": 4,
    "options": [
      {
        "title": "Little or no internal documentation.",
        "description": ""
      },
      {
        "title": "System requirements clearly documented.",
        "description": ""
      },
      {
        "title": "Quickstart guide for key features & use cases. FAQ exists. Location documented in README for the internal documentation that is accessible by all employees who have completed 1Source onboarding.",
        "description": "Searchable and viewable internal documentation."
      },
      {
        "title": "Full feature descriptions and tutorials exist. Able to track documentation changes tracked with Git.",
        "description": "Well-maintained comprehensive docs."
      },
      {
        "title": "Extensive tutorials requiring little to no setup. Internal documentation release aligns with SW Release.",
        "description": "Publication dates are clear. Documentation versions are aligned with SW versions."
      }
    ],
    "tierMapping": [5, 4, 3, 2, 1],
    "maturityMapping": [-1, 2, 2, 2, 4]
  },
  {
    "title": "Documentation Coverage",
    "dtoKey": "documentationCoverage",
    "domain": "project",
    "intent": "Reason for needing this is so users know what functions they can use and have confidence will still exist in the future (ex: stable API). Expand on what it means to be documented(ex: --help) Also helps with security.",
    "category": "Documentation",
    "importance": 4,
    "options": [
      {
        "title": "Manually generated exposed interface documentation. Automated check verifies exposed interface coverage.",
        "description": ""
      },
      {
        "title": "At least 50% applicable exposed interface coverage. Auto-generated exposed interface documentation.",
        "description": "Exposed interface examples: Public API for Binary Reuse, Public + Internal API for Source Reuse & Contribution. Interfaces only, not comments on usage. Using Javadoc, Doxygen, Swagger, or similar API documentation system."
      },
      {
        "title": "At least 60% applicable exposed interface coverage.",
        "description": ""
      },
      {
        "title": "At least 75% applicable exposed interface coverage.",
        "description": ""
      },
      {
        "title": ">95% applicable exposed interface coverage. Exposed interface documentation with examples of usage and explanation.",
        "description": ""
      }
    ],
    "tierMapping": [5, 4, 3, 2, 1],
    "maturityMapping": [2, 2, 2, 2, 4]
  },
  {
    "title": "Pre Production Early Access",
    "dtoKey": "preProductionEarlyAccess",
    "domain": "repoProject",
    "intent": "Reuse and contribution teams can utilize and play with some partially baked features before they are production ready.",
    "category": "Testing",
    "importance": 1,
    "options": [
      {
        "title": "No Continuous Integration",
        "description": ""
      },
      {
        "title": "Continuous Integration testing / dev builds",
        "description": ""
      },
      {
        "title": "Continuous Integration triggered with every change coming into the project is validated but not necessarily publicly released.",
        "description": "Example: CI production builds"
      },
      {
        "title": "Continuous Integration completed with internal release and partially baked features.",
        "description": "Do you provide features previews in internal releases for testing and feedback before external release? ."
      },
      {
        "title": "Continuous Integration and Continuous Devivery with production release and feature flags.",
        "description": "Code release ≠ feature release so features do not impact each other, degrade the quality of the release, or block the release. Do you use approaches like Feature toggles or Feature flags to control customer access to experimental features to allow for external testing and feedback before a full release of that feature."
      }
    ],
    "tierMapping": [5, 4, 3, 2, 1],
    "maturityMapping": [-1, 0, 1, 2, 4]
  },
  {
    "title": "Intellectual Property Leak Detection Tool",
    "dtoKey": "intellectualPropertyLeakDetectionTool",
    "domain": "repo",
    "intent": "Reuse team needs to be able to leverage previously clean tool results",
    "category": "QRC",
    "importance": 1,
    "options": [
      {
        "title": "No IP leak detection",
        "description": ""
      },
      {
        "title": "Manual IP Leak Detection Tool scan passes",
        "description": "IPDLT found in Product Validation tools: http://pvtools.intel.com/"
      },
      {
        "title": "Manual IP Leak Detection Tool scan passes and is executed prior to each public release",
        "description": ""
      },
      {
        "title": "Automated IP Leak Detection Tool scan on defined schedule",
        "description": ""
      },
      {
        "title": "Automated IP Leak Detection Tool scan built into Continuous Integration",
        "description": ""
      }
    ],
    "tierMapping": [5, 4, 3, 2, 1],
    "maturityMapping": [0, 1, 1, 2, 4]
  },
  {
    "title": "Maintainers Setup",
    "dtoKey": "maintainersSetup",
    "domain": "repo",
    "intent": "Reuse and contribution teams have confidence that the project is getting updated and is not a dead a project.",
    "category": "Governance",
    "importance": 4,
    "options": [
      {
        "title": "Less than 2 active maintainers",
        "description": ""
      },
      {
        "title": "2 or more active maintainers",
        "description": ""
      },
      {
        "title": "Maintainers documented in the CONTRIBUTING file and a commitment to review and integrate contributions.",
        "description": "Active maintainers review pull requests and respond to issues submitted. Example: https://github.com/kata-containers/community/blob/main/CONTRIBUTING.md#project-maintainers"
      },
      {
        "title": "Response time commitment documented in the CONTRIBUTING file.",
        "description": "7 days response time for pull requests reviews and issues response."
      },
      {
        "title": "Clear governance structure with roles, responsibilities, and bus factor documented in the CONTRIBUTING file. Review process automated with a CODEOWNERS file.",
        "description": "Example: https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners"
      }
    ],
    "tierMapping": [5, 4, 3, 2, 1],
    "maturityMapping": [0, 1, 1, 1, 1]
  },
  {
    "title": "Participation Ease Of Ramp",
    "dtoKey": "participationEaseOfRamp",
    "domain": "repoProject",
    "intent": "Contribution teams have an easier time learning quickly about the project in order to start contributions.  (Ex: don't have to learn for 8 weeks to make 2-line code change)",
    "category": "DX",
    "importance": 2,
    "options": [
      {
        "title": "Steep learning curve. Minimal or no documentation accessible.",
        "description": "Hard for new developers to make even small code changes."
      },
      {
        "title": "High-level architecture and engineering design decisions are documented.",
        "description": "Data flow schema (block schema with interconnection between modules) or high-level architecture decision on solution."
      },
      {
        "title": "Clear responsibility and engineering design choices for individual components documented.",
        "description": "Easy to navigate the code for contributors to find where to put changes."
      },
      {
        "title": "Well-defined workflow as well as roles and responsibilities documented. Discoverable list of starter issues.",
        "description": "Examples of starter issues: non-critical, low priority, and easy issues that are ideal for new contributors to fix."
      },
      {
        "title": "Proven extensibility which follows language or frawework guidelines.",
        "description": "Reference language or framework guidelines in documentation. Typical extension points are defined and well documented."
      }
    ],
    "tierMapping": [5, 4, 3, 2, 1],
    "maturityMapping": [-1, 1, 1, 2, 2]
  },
  {
    "title": "Quality Assurance CI",
    "dtoKey": "qualityAssuranceCI",
    "domain": "repoProject",
    "intent": "CI in place ensures quality and minimizes risk for reuse and contribution teams. Builds confidence in reusing the code.",
    "category": "Quality",
    "importance": 4,
    "options": [
      {
        "title": "Manual QA done by core teams",
        "description": "No manual quality gates in place. Everything can be tested by core team locally before merging pull requests."
      },
      {
        "title": "Scriptable and documented QA such that contributor executes locally before submitting pull requests.",
        "description": "Some manual quality gates in place. Examples: pre-commit and pre-push hooks."
      },
      {
        "title": "Pull requests trigger Continuous Integration (CI) for build & unit tests. Test results are stored and accessible.",
        "description": "Some automated quality gates in place. Test results are available and actionable to contributors."
      },
      {
        "title": "Pull requests trigger Continuous Integration (CI) for several types of required testing.",
        "description": "Mostly automated quality gates in place. Examples of testing types: unit, build, integration tests, user acceptance tests, E2E testing, etc. https://www.browserstack.com/guide/testing-pyramid-for-test-automation"
      },
      {
        "title": "Continuous Integration (CI) & Automated Daily Testing where results are stored in test case management system.",
        "description": "Fully automated quality gates in place. Test case management system allows for queries and reporting. Short feedback loops."
      }
    ],
    "tierMapping": [5, 4, 3, 2, 1],
    "maturityMapping": [0, 1, 1, 2, 4]
  },
  {
    "title": "Release Cadence",
    "dtoKey": "releaseCadence",
    "domain": "project",
    "intent": "Reuse and contribution teams needs to know when to grab the next version and that high risk bugs will be fixed quickly.",
    "category": "Planning",
    "importance": 3,
    "options": [
      {
        "title": "Unpublished or no apparent release schedule.",
        "description": ""
      },
      {
        "title": "Published and accessible release schedule.",
        "description": ""
      },
      {
        "title": "Fixed cadence release schedule where on-demand frequency may vary."
        "description": "Example of fixed cadence: yearly, quarterly, monthly, weekly, or any other recurring schedule."
      },
      {
        "title": "Pull request review SLA published with commitment for lead time.",
        "description": ""
      },
      {
        "title": "Able to cut release or deliver bug-fix outside of regular release schedule within 2 business days.",
        "description": "Example: Critical CVE found and fixed"
      }
    ],
    "tierMapping": [5, 4, 3, 2, 1],
    "maturityMapping": [-1, 0, 2, 2, 4]
  },
  {
    "title": "Requirements",
    "dtoKey": "requirements",
    "domain": "repoProject",
    "intent": "Reuse and contribution teams able to see what requirements are being met or planned to be met by the project and build confidence through R2V (requirements to validation)",
    "category": "Planning",
    "importance": 1,
    "options": [
      {
        "title": "No requirements.",
        "description": ""
      },
      {
        "title": "Requirements are available to the project engineering team and location documented in the root README file.",
        "description": "Example: Link to JIRA, MRD, or wiki, etc."
      },
      {
        "title": "Requirements are available to all employees who have completed 1Source on-boarding.",
        "description": ""
      },
      {
        "title": "Requirements are linked to test cases manually.",
        "description": ""
      },
      {
        "title": "Requirements are linked to test cases via an automated system.",
        "description": ""
      }
    ],
    "tierMapping": [5, 4, 3, 2, 1],
    "maturityMapping": [-1, 1, 2, 2, 4]
  },
  {
    "title": "Roadmap",
    "dtoKey": "roadmap",
    "domain": "project",
    "intent": "Reuse and contribution teams to know what features are included in upcoming major releases",
    "category": "Planning",
    "importance": 2,
    "options": [
      {
        "title": "No roadmap or unplublished roadmap.",
        "description": ""
      },
      {
        "title": "Published roadmap with location documented in root README.",
        "description": "Link to JIRA board or presentation."
      },
      {
        "title": "Internally published and discoverable info about next release available to all employees who have completed 1Source on-boarding.",
        "description": ""
      },
      {
        "title": "Roadmap with some features updated on quarterly basis.",
        "description": ""
      },
      {
        "title": "Roadmap with features and release dates updated on quarterly basis.",
        "description": ""
      }
    ],
    "tierMapping": [5, 4, 3, 2, 1],
    "maturityMapping": [-1, 2, 2, 4, 4]
  },
  {
    "title": "Security Development Lifecycle",
    "dtoKey": "securityDevelopmentLifecycle",
    "domain": "project",
    "intent": "Reuse team needs to be able to leverage previously approved Parent SDLE project and evidence. Reuse team needs to know that SDL tasks and fixes are being handled quickly",
    "category": "QRC",
    "importance": 3,
    "options": [
      {
        "title": "Project has a registered SDL project that can be accessed via the SDL Essentials Portal. Is accessible via the SDL One Reports Tool.",
        "description": "SDL Essentials portal: https://sdl-e.app.intel.com.  SDL One Reports tool: https://wiki.ith.intel.com/display/SDLEssentials/SDL+One+Report"
      },
      {
        "title": "All SDL evidence has been uploaded to the SDL Essentials Portal. This can be checked via the SDL One Report Tool. Product Security Expert (PSE) assigned to SDL project in SDL Essentials Portal.",
        "description": ""
      },
      {
        "title": "SDL project in SDL Essentials Portal has Read Access for all employees that have completed 1Source onboarding.  Code marked as shippable (release tags) has 100% of SDL tasks complete. Not Applicable - project is internal use only. Compliant with Intel PSIRT policy.",
        "description": "Peridical security audit. PSIRT policy - all PSIRTs have been fixed or are within the acceptable fix window - https://wiki.ith.intel.com/display/PSIRTpublic/Phase+2+-+Mitigate"
      },
      {
        "title": "High velocity or steady rate of SDL task completion. Automation of applicable security tools exists.",
        "description": "Examples of security tools: Klocwork, Coverity, BDBA, Snyk, etc."
      },
      {
        "title": "2 weeks SLA for addressing critical security issues. SDL status, security bugs, and scan results are accessible on a dashboard. Automated runs of applicable security tools occurs on a defined frequent schedule. Dashboard has access granted for all employees that have complete 1Source onboarding.",
        "description": ""
      }
    ],
    "tierMapping": [5, 4, 3, 2, 1],
    "maturityMapping": [1, 1, 1, 4, 4]
  },
  {
    "title": "Software Legal Compliance",
    "dtoKey": "softwareLegalCompliance",
    "domain": "project",
    "intent": "Reuse team needs to be able to leverage previously approved Parent SWLC approvals, evidence, and obligations. Reuse team needs to know that SWLC tasks and fixes are being handled quickly",
    "category": "QRC",
    "importance": 3,
    "options": [
      {
        "title": "Incomplete or no evidence of Software Legal Compliance (SWLC) approval.",
        "description": ""
      },
      {
        "title": "Obtained Software Legal Compliance (SWLC) approval. Record Center evidence submitted.",
        "description": "Examples: Protex, Intellectual Property (IP) Plan, Open Source PDT, Export Compliance, etc."
      },
      {
        "title": "Up-to-date SWLC evidence can easily be shared. SWLC evidence posted in location accessible by employees that have completed 1Source onboarding. Provide list of obligations that project reusing this code should fulfill.",
        "description": ""
      },
      {
        "title": "Manual applicable SWLC scans on defined frequent schedule.",
        "description": "Example: Protex, etc."
      },
      {
        "title": "Automated applicable SWLC scans on defined frequent schedule.",
        "description": "Example: Protex, etc."
      }
    ],
    "tierMapping": [5, 4, 3, 2, 1],
    "maturityMapping": [1, 1, 2, 2, 4]
  },
  {
    "title": "Source Distribution Language Specific Packages",
    "dtoKey": "sourceDistributionLanguageSpecificPackages",
    "domain": "project",
    "intent": "Ease of consumption, risk mitigation, reproducibility",
    "category": "Distribution",
    "importance": 1,
    "options": [
      {
        "title": "N/A",
        "description": ""
      },
      {
        "title": "Not distributed via a package manager.",
        "description": "Example: Requires manual downloading of archived sources from an FTP server."
      },
      {
        "title": "Distributed via a package manager. Compilation and installation is NOT tested using a system account prior to distribution. Has clear compilation and installation instructions.",
        "description": ""
      },
      {
        "title": "Distributed via a package manager. Compilation and installation is tested using a system account prior to distribution.",
        "description": ""
      },
      {
        "title": "Distributed via a package manager. Compilation and installation is tested using a system account on defined schedule. Has an installation health check tool that is used to test installation using a system account.",
        "description": ""
      },
      {
        "title": "Distributed via a package manager. Compilation and installation is tested using a system account on defined schedule. Has an installation health check tool that is used to test installation using a system account. Compilation and installation is tested after deployment of a binary.",
        "description": ""
      }
    ],
    "tierMapping": [-1, 5, 4, 3, 2, 1],
    "maturityMapping": [-1, 1, 1, 2, 4, 4]
  },
  {
    "title": "Support Reuse Users",
    "dtoKey": "supportReuseUsers",
    "domain": "repoProject",
    "intent": "Support system infrastructure for internal customers that are reuse users",
    "category": "Support",
    "importance": 2,
    "options": [
      {
        "title": "Informal communication with defined individuals",
        "description": ""
      },
      {
        "title": "Formal communication with defined individuals",
        "description": ""
      },
      {
        "title": "Issue tracking system and published list of feature requests for all employees who have completed 1Source onboading. ",
        "description": "Internal consumers able to log issues/questions/feature requests. Example: GitHub issues, JIRA, etc."
      },
      {
        "title": "Dedicated support team and floating response time. ",
        "description": "Response time is not defined."
      },
      {
        "title": "Dedicated support team and defined response time. Features must include detailed information.",
        "description": "Response time defined and adhered to. Detailed feature information: open, searchable, archived discussion, clear yes/no, features slotted to releases (similar to GitHub issues)"
      }
    ],
    "tierMapping": [5, 4, 3, 2, 1],
    "maturityMapping": [-1, 2, 2, 2, 2]
  },
  {
    "title": "Test Plan And Infrastructure",
    "dtoKey": "testPlanAndInfrastructure",
    "domain": "repo",
    "intent": "Reuse or contribution teams able to recreate or integrate test env. Need to contribute tests for their use cases.",
    "category": "Testing",
    "importance": 2,
    "options": [
      {
        "title": "N/A",
        "description": ""
      },
      {
        "title": "Manually tested only before each release. Validation plan documented (test cases and here's how). Scope of validation. Test results.",
        "description": ""
      },
      {
        "title": "Automated test suite available that can be kicked off manually. Validation plan shared.",
        "description": ""
      },
      {
        "title": "Test env setup clearly defined. Status of validation and execution viewable.",
        "description": ""
      },
      {
        "title": "Automated Daily Testing.",
        "description": ""
      },
      {
        "title": "Ability for consumers to contribute to test suite. SW-defined infrastructure if internal/external consumers need to recreate (for source reuse). Defined CI scripts (for source reuse).",
        "description": ""
      }
    ],
    "tierMapping": [-1, 5, 4, 3, 2, 1],
    "maturityMapping": [-1, 1, 2, 2, 2, 4]
  },
  {
    "title": "Versioning",
    "dtoKey": "versioning",
    "domain": "repo",
    "intent": "Reuse team able to evaluate cost of integrating new release based on number reflecting size of change",
    "category": "Planning",
    "importance": 4,
    "options": [
      {
        "title": "No versioning",
        "description": ""
      },
      {
        "title": "Manual versioning (not using a scheme).",
        "description": ""
      },
      {
        "title": "Versioned releases (using any versioning scheme that you have published info about).",
        "description": ""
      },
      {
        "title": "Semantic versioning following https://semver.org/ guidelines.",
        "description": ""
      }
    ],
    "tierMapping": [5, 4, 3, 1],
    "maturityMapping": [-1, 0, 1, 4]
  }
]
